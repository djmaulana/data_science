# -*- coding: utf-8 -*-
"""TuproTBA_lexicalXparser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LmYJDocS1REaWAlO8DIj08D1iTjQ6xtY

Alif Rahmat Julianda			(1301190451)

Didit Johar Maulana			(1301194021)

Muhamad Fikry Saputra		(1301194300)
"""

import string

# FUNCTION OF LEXICAL

def lexical(sentence): 
  # input example 
  #sentence = input()
  #sentence = 'vater mutter  buch schuhe frikadelle brot hut ball lesen essen tragen treten'
  input_string = sentence.lower()+'#'

  #init
  alphabet_list = list(string.ascii_lowercase)
  state_list = ['q0', 'q1', 'q2', 'q3', 'q4', 'q5',
                'q6', 'q7', 'q8', 'q9', 'q10', 'q11',
                'q12','q13', 'q14', 'q15', 'q16', 
                'q17', 'q18', 'q19', 'q20', 'q21', 
                'q22', 'q23', 'q24', 'q25', 'q26', 
                'q27', 'q28', 'q29', 'q30', 'q31', 
                'q32', 'q33', 'q34', 'q35', 'q36', 
                'q37', 'q38', 'q39', 'q40', 'q41', 'q42']
  transition_table = {}

  for state in state_list:
    for alphabet in alphabet_list:
      transition_table[(state, alphabet)] = 'error'
    transition_table[(state, '#')] = 'error'
    transition_table[(state, ' ')] = 'error' 

  # space before input string 
  transition_table['q0', ' '] = 'q0'

  # update the transiton table for the following token: vater
  transition_table[('q0', 'v')] = 'q1'
  transition_table[('q1', 'a')] = 'q2'
  transition_table[('q2', 't')] = 'q3'
  transition_table[('q3', 'e')] = 'q4'
  transition_table[('q4', 'r')] = 'q5'
  transition_table[('q5', ' ')] = 'q6'
  transition_table[('q5', '#')] = 'accept'
  transition_table[('q6', ' ')] = 'q6'
  transition_table[('q6', '#')] = 'accept'

  # update the transiton table for the following token: mutter
  transition_table[('q0', 'm')] = 'q7'
  transition_table[('q7', 'u')] = 'q8'
  transition_table[('q8', 't')] = 'q2'

  # update the transiton table for the following token: lesen
  transition_table[('q0', 'l')] = 'q10'
  transition_table[('q10', 'e')] = 'q11'
  transition_table[('q11', 's')] = 'q12'
  transition_table[('q12', 'e')] = 'q13'
  transition_table[('q13', 'n')] = 'q5'

  # update the transiton table for the following token: essen
  transition_table[('q0', 'e')] = 'q15'
  transition_table[('q15', 's')] = 'q11'

  # update the transiton table for the following token: tragen
  transition_table[('q0', 't')] = 'q18'
  transition_table[('q18', 'r')] = 'q19'
  transition_table[('q19', 'a')] = 'q20'
  transition_table[('q20', 'g')] = 'q12'

  # update the transiton table for the following token: treten
  transition_table[('q19', 'e')] = 'q21'
  transition_table[('q21', 't')] = 'q12'

  # update the transiton table for the following token: buch
  transition_table[('q0', 'b')] = 'q22'
  transition_table[('q22', 'u')] = 'q23'
  transition_table[('q23', 'c')] = 'q24'
  transition_table[('q24', 'h')] = 'q5'

  # update the transiton table for the following token: ball
  transition_table[('q22', 'a')] = 'q27'
  transition_table[('q27', 'l')] = 'q28'
  transition_table[('q28', 'l')] = 'q5'

  # update the transiton table for the following token: brot
  transition_table[('q22', 'r')] = 'q25'
  transition_table[('q25', 'o')] = 'q26'
  transition_table[('q26', 't')] = 'q5'

  # update the transiton table for the following token: schuhe
  transition_table[('q0', 's')] = 'q30'
  transition_table[('q30', 'c')] = 'q31'
  transition_table[('q31', 'h')] = 'q32'
  transition_table[('q32', 'u')] = 'q33'
  transition_table[('q33', 'h')] = 'q34'
  transition_table[('q34', 'e')] = 'q5'

  # update the transiton table for the following token: frikadelle 
  transition_table[('q0', 'f')] = 'q35'
  transition_table[('q35', 'r')] = 'q36'
  transition_table[('q36', 'i')] = 'q37'
  transition_table[('q37', 'k')] = 'q38'
  transition_table[('q38', 'a')] = 'q39'
  transition_table[('q39', 'd')] = 'q40'
  transition_table[('q40', 'e')] = 'q41'
  transition_table[('q41', 'l')] = 'q42'
  transition_table[('q42', 'l')] = 'q34'

  # update the transiton table for the following token: hut 
  transition_table[('q0', 'h')] = 'q43'
  transition_table[('q43', 'u')] = 'q26'

  # transition for new token
  transition_table[('q6', 'v')] = 'q1'
  transition_table[('q6', 'm')] = 'q7'
  transition_table[('q6', 'l')] = 'q10'
  transition_table[('q6', 't')] = 'q18'
  transition_table[('q6', 'e')] = 'q15'
  transition_table[('q6', 'b')] = 'q22'
  transition_table[('q6', 'h')] = 'q43'
  transition_table[('q6', 's')] = 'q30'
  transition_table[('q6', 'f')] = 'q35'


  # lexical analysis
  idx_char = 0
  state = 'q0'
  current_token = ''
  while state!='accept':
    current_char = input_string[idx_char]
    current_token += current_char
    state = transition_table[(state, current_char)]
    if state == 'q5':
      print('current token: ', current_token,', valid')
      current_token = ''
    if state == 'error':
      print('ERROR, terdapat token yang tidak memenuhi')
      break;
    idx_char += 1

  #conclusion 
  if state == 'accept':
    print('semua token di input: ', sentence, ', VALID\n')
  if state == 'error':
    print('semua token di input: ', sentence, ', ERROR\n')


# FUNCTION OF PARSER

def parser(sentence_2):  
  # input exmaple
  #sentence_2 = 'vater mutter ' 
  tokens = sentence_2.lower().split()
  tokens.append('EOS')

  #symbols definition
  nonTerminals = ['S', 'NN', 'VB']
  terminals = ['vater', 'mutter',  'buch', 'schuhe', 'frikadelle', 'brot', 'hut' ,'ball' ,'lesen' ,'essen' ,'tragen', 'treten' ]

  #parse table definition
  parseTable = {}

  parseTable[('S', 'vater')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'mutter')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'buch')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'schuhe')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'frikadelle')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'brot')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'hut')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'ball')] = ['NN', 'VB', 'NN']
  parseTable[('S', 'lesen')] = ['ERROR']
  parseTable[('S', 'essen')] = ['ERROR']
  parseTable[('S', 'tragen')] = ['ERROR']
  parseTable[('S', 'treten')] = ['ERROR']
  parseTable[('S', 'EOS')] = ['ERROR']

  parseTable[('NN', 'vater')] = ['vater']
  parseTable[('NN', 'mutter')] = ['mutter']
  parseTable[('NN', 'buch')] = ['buch']
  parseTable[('NN', 'schuhe')] = ['schuhe']
  parseTable[('NN', 'frikadelle')] = ['frikadelle']
  parseTable[('NN', 'brot')] = ['brot']
  parseTable[('NN', 'hut')] = ['hut']
  parseTable[('NN', 'ball')] = ['ball']
  parseTable[('NN', 'lesen')] = ['ERROR']
  parseTable[('NN', 'essen')] = ['ERROR']
  parseTable[('NN', 'tragen')] = ['ERROR']
  parseTable[('NN', 'treten')] = ['ERROR']
  parseTable[('NN', 'EOS')] = ['ERROR']

  parseTable[('VB', 'vater')] = ['ERROR']
  parseTable[('VB', 'mutter')] = ['ERROR']
  parseTable[('VB', 'buch')] = ['ERROR']
  parseTable[('VB', 'schuhe')] = ['ERROR']
  parseTable[('VB', 'frikadelle')] = ['ERROR']
  parseTable[('VB', 'brot')] = ['ERROR']
  parseTable[('VB', 'hut')] = ['ERROR']
  parseTable[('VB', 'ball')] = ['ERROR']
  parseTable[('VB', 'lesen')] = ['lesen']
  parseTable[('VB', 'essen')] = ['essen']
  parseTable[('VB', 'tragen')] = ['tragen']
  parseTable[('VB', 'treten')] = ['treten']
  parseTable[('VB', 'EOS')] = ['ERROR']


  #stack init
  stack = []
  stack.append('#')
  stack.append('S')

  #input reading init
  idxToken = 0
  symbol = tokens[idxToken]

  # parsing process
  while (len(stack) > 0):
    top = stack[len(stack)-1]
    print('top = ', top)
    print('symbol = ', symbol)
    if top in terminals:
      print('top adalah symbol terminal')
      if top == symbol :
        stack.pop()
        idxToken += 1
        symbol = tokens[idxToken]
        if symbol == 'EOS':
          print('isi stack : ', stack)
          stack.pop()
      else:
        print('ERROR')
        break;
    elif top in nonTerminals:
      print('top adalah simbol non terminal ')
      if parseTable[(top, symbol)][0] != 'ERROR':
        stack.pop()
        symbolsPushed = parseTable[(top, symbol)]
        for i in range(len(symbolsPushed)-1,-1,-1):
          stack.append(symbolsPushed[i])
      else :
        print('ERROR')
        break;
    else :
      print('ERROR')
      break;
    print('isi stack : ', stack)
    print()

  # Conclusion
  print()
  if symbol == 'EOS' and len(stack) == 0:
    print('Input string ', sentence_2, ' diterima, sesuai Grammar')
  else:
    print('ERROR, input string: ', sentence_2, ', tidak diterima, tidak sesuai Grammar')


# MAIN PROGRAM

sentence = input("Masukkan kalimat: ")
print("\nLexical Analyzer: \n")
lexical(sentence)
print("Parser: \n")
parser(sentence)