# -*- coding: utf-8 -*-
"""Tuproai1_AlgoritmaGenetika.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FsCwFhPlaFBN8IKe4HrPo9_sTlw6-MxE

Tugas Algoritma Genetika 
- Didit Johar Maulana - 1301194021
- Muhammad Fikry Saputra - 1301194300
- Sri Utami - 1301194104

Import Library
"""

import random
from random import randint
import math
from IPython.display import clear_output

"""Generate Chromosome"""

def chrome(lenght):
  return [ randint(0,1) for x in range(lenght)]

chrome(10)

"""Generate Populations"""

def populations(n, lenght):
  return [chrome(lenght) for x in range(n)]

populations(10,10)

"""Decode"""

def toDec(x):
  return int("".join(map(str,x)),2)

def decode(choromosome):
  lim1 = 2-(-1)
  lim2 = 2
  alel = round(len(choromosome)/2)
  x = toDec(choromosome[:alel])
  y = toDec(choromosome[alel:])
  xmax = 2**(len(choromosome)/2)-1
  resultX = -1+(x/xmax)*lim1
  resultY = -1+(y/xmax)*lim2
  
  return (resultX, resultY)

x = populations(10,10)
print(x[0])
decode(x[0])

"""Fitness """

def func(x,y):
  return math.cos(x*x) * math.sin(y*y) + (x + y)
def fitness(populations):
  fitness = []
  for i in populations:
    x,y = decode(i)
    fitness.append(func(x,y))
  return fitness

fitness(x)

"""PEMILIHAN ORANGTUA"""

def tournamentParent(populations, fitness, n):
  index = random.sample(range(n), round(n/2))
  print(index)
  print(range(n))
  nominate = [fitness[index[j]] for j in range(round(n/2))]
  best = sorted(zip(nominate, index), key=lambda k: k[0], reverse=True)
  return populations[best[0][1]], fitness[best[0][1]]

x = populations(10,10)
y = fitness(x)
tournamentParent(x, y, 10)

"""Elitism"""

def elitism(populations, fitness):
  max = 2
  elite = []
  idx = range(len(populations))
  best = sorted(zip(populations, fitness), key=lambda k: k[1], reverse=True)
  for i in range(max):
    elite.append(best[i][0])
  return elite

"""CROSSOVER"""

def crossOver(p1, p2, prob):
  if random.random() <= prob:
    iters = random.choice(range(1, len(p1)-1))
    temp = p1[iters:]
    p1[iters:] = p2[iters:]
    p2[iters:] = temp
  return p1,p2

print(x[0],x[1])
crossOver(x[0],x[1],0.7)

"""MUTASI"""

def mutasi (choromosome, prob):
	mutas = choromosome.copy()
	for i in range(len(mutas)):
		if random.random()<=prob:
			if mutas[i] == 1:
			   mutas[i] = 0
			elif mutas[i] == 0:
			   mutas[i] = 1
	return mutas

x = populations(10,10)
print(x[0])
mutasi(x[0], 0.5)

"""MAIN CODE"""

#Variable yang digunakan
nPopulations = 20
mutationProb = 0.5
crossoverProb = 0.5
alel = 10
maxGen = 250

population = populations(nPopulations, alel)
for gen in range(maxGen):
  fitnesses = fitness(population)
  newPopulation = elitism(population, fitnesses)
  while len(newPopulation) < nPopulations:
    parent1,*_ = tournamentParent(population, fitnesses, nPopulations)
    parent2,*_ = tournamentParent(population, fitnesses, nPopulations)
    child1, child2 = parent1.copy(), parent2.copy()
    child1, child2 = crossOver(child1, child2, crossoverProb)
    child1 = mutasi(child1, mutationProb)
    child2 = mutasi(child2, mutationProb)    
    newPopulation.extend([child1, child2])
  clear_output(wait=True)
  print("gen ", gen + 1 )
  print(*zip(newPopulation, fitnesses), sep='\n')
  population = newPopulation
n = round(nPopulations/6)
elite = list(zip(population[:n], fitnesses[:n]))
print("Hasil ")
print(*elite, sep='\n')
print("Solusi Terbaik ", elite[0], sep='\n')
print("Hasil Decode x dan y ")
print(decode(elite[0][0]))